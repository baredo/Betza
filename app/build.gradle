/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
}



application {
    // Define the main class for the application.
    mainClass = 'runnables.ParseCMD'
    project.archivesBaseName = 'ParseCMD'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task runWithJavaExec(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    main = 'runnables.ParseCMD'
}
    
task parseCMD(type: Jar, description: "Creates ParseCMD.jar") {
    dependsOn compileJava
    var ClassMain = "ParseCMD"
    var MainFolder = "runnables"
    var PlataforVersion = '1.17';
    var Version = '0.1-alpha';

    manifest {
        attributes(
                "Main-Class": "$MainFolder.$ClassMain",
                "Implementation-Title": ClassMain,
                "Implementation-Description": 'descripcion',
                "Platform-Version": PlataforVersion,
                "Implementation-Version": Version,
                "Assembly-Date": new java.util.Date().toString()
        )
    }
    archiveFileName = "${ClassMain}-${Version}.jar"
    destinationDirectory = file("${buildDir}/libs")
    from sourceSets.main.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

//add tasks you want to execute on build
artifacts {
    //archives parseCMD
}